/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as OrganizationsRouteImport } from './routes/organizations/route'
import { Route as IndexImport } from './routes/index'
import { Route as OrganizationsIndexImport } from './routes/organizations/index'
import { Route as OrganizationsOrgIdRouteImport } from './routes/organizations/$orgId/route'
import { Route as OrganizationsOrgIdIndexImport } from './routes/organizations/$orgId/index'
import { Route as OrganizationsOrgIdEmployeesRouteImport } from './routes/organizations/$orgId/employees/route'
import { Route as OrganizationsOrgIdEmployeesIndexImport } from './routes/organizations/$orgId/employees/index'
import { Route as OrganizationsOrgIdEmployeesEmployeeIdImport } from './routes/organizations/$orgId/employees/$employeeId'

// Create/Update Routes

const OrganizationsRouteRoute = OrganizationsRouteImport.update({
  id: '/organizations',
  path: '/organizations',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const OrganizationsIndexRoute = OrganizationsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OrganizationsRouteRoute,
} as any)

const OrganizationsOrgIdRouteRoute = OrganizationsOrgIdRouteImport.update({
  id: '/$orgId',
  path: '/$orgId',
  getParentRoute: () => OrganizationsRouteRoute,
} as any)

const OrganizationsOrgIdIndexRoute = OrganizationsOrgIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OrganizationsOrgIdRouteRoute,
} as any)

const OrganizationsOrgIdEmployeesRouteRoute =
  OrganizationsOrgIdEmployeesRouteImport.update({
    id: '/employees',
    path: '/employees',
    getParentRoute: () => OrganizationsOrgIdRouteRoute,
  } as any)

const OrganizationsOrgIdEmployeesIndexRoute =
  OrganizationsOrgIdEmployeesIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => OrganizationsOrgIdEmployeesRouteRoute,
  } as any)

const OrganizationsOrgIdEmployeesEmployeeIdRoute =
  OrganizationsOrgIdEmployeesEmployeeIdImport.update({
    id: '/$employeeId',
    path: '/$employeeId',
    getParentRoute: () => OrganizationsOrgIdEmployeesRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/organizations': {
      id: '/organizations'
      path: '/organizations'
      fullPath: '/organizations'
      preLoaderRoute: typeof OrganizationsRouteImport
      parentRoute: typeof rootRoute
    }
    '/organizations/$orgId': {
      id: '/organizations/$orgId'
      path: '/$orgId'
      fullPath: '/organizations/$orgId'
      preLoaderRoute: typeof OrganizationsOrgIdRouteImport
      parentRoute: typeof OrganizationsRouteImport
    }
    '/organizations/': {
      id: '/organizations/'
      path: '/'
      fullPath: '/organizations/'
      preLoaderRoute: typeof OrganizationsIndexImport
      parentRoute: typeof OrganizationsRouteImport
    }
    '/organizations/$orgId/employees': {
      id: '/organizations/$orgId/employees'
      path: '/employees'
      fullPath: '/organizations/$orgId/employees'
      preLoaderRoute: typeof OrganizationsOrgIdEmployeesRouteImport
      parentRoute: typeof OrganizationsOrgIdRouteImport
    }
    '/organizations/$orgId/': {
      id: '/organizations/$orgId/'
      path: '/'
      fullPath: '/organizations/$orgId/'
      preLoaderRoute: typeof OrganizationsOrgIdIndexImport
      parentRoute: typeof OrganizationsOrgIdRouteImport
    }
    '/organizations/$orgId/employees/$employeeId': {
      id: '/organizations/$orgId/employees/$employeeId'
      path: '/$employeeId'
      fullPath: '/organizations/$orgId/employees/$employeeId'
      preLoaderRoute: typeof OrganizationsOrgIdEmployeesEmployeeIdImport
      parentRoute: typeof OrganizationsOrgIdEmployeesRouteImport
    }
    '/organizations/$orgId/employees/': {
      id: '/organizations/$orgId/employees/'
      path: '/'
      fullPath: '/organizations/$orgId/employees/'
      preLoaderRoute: typeof OrganizationsOrgIdEmployeesIndexImport
      parentRoute: typeof OrganizationsOrgIdEmployeesRouteImport
    }
  }
}

// Create and export the route tree

interface OrganizationsOrgIdEmployeesRouteRouteChildren {
  OrganizationsOrgIdEmployeesEmployeeIdRoute: typeof OrganizationsOrgIdEmployeesEmployeeIdRoute
  OrganizationsOrgIdEmployeesIndexRoute: typeof OrganizationsOrgIdEmployeesIndexRoute
}

const OrganizationsOrgIdEmployeesRouteRouteChildren: OrganizationsOrgIdEmployeesRouteRouteChildren =
  {
    OrganizationsOrgIdEmployeesEmployeeIdRoute:
      OrganizationsOrgIdEmployeesEmployeeIdRoute,
    OrganizationsOrgIdEmployeesIndexRoute:
      OrganizationsOrgIdEmployeesIndexRoute,
  }

const OrganizationsOrgIdEmployeesRouteRouteWithChildren =
  OrganizationsOrgIdEmployeesRouteRoute._addFileChildren(
    OrganizationsOrgIdEmployeesRouteRouteChildren,
  )

interface OrganizationsOrgIdRouteRouteChildren {
  OrganizationsOrgIdEmployeesRouteRoute: typeof OrganizationsOrgIdEmployeesRouteRouteWithChildren
  OrganizationsOrgIdIndexRoute: typeof OrganizationsOrgIdIndexRoute
}

const OrganizationsOrgIdRouteRouteChildren: OrganizationsOrgIdRouteRouteChildren =
  {
    OrganizationsOrgIdEmployeesRouteRoute:
      OrganizationsOrgIdEmployeesRouteRouteWithChildren,
    OrganizationsOrgIdIndexRoute: OrganizationsOrgIdIndexRoute,
  }

const OrganizationsOrgIdRouteRouteWithChildren =
  OrganizationsOrgIdRouteRoute._addFileChildren(
    OrganizationsOrgIdRouteRouteChildren,
  )

interface OrganizationsRouteRouteChildren {
  OrganizationsOrgIdRouteRoute: typeof OrganizationsOrgIdRouteRouteWithChildren
  OrganizationsIndexRoute: typeof OrganizationsIndexRoute
}

const OrganizationsRouteRouteChildren: OrganizationsRouteRouteChildren = {
  OrganizationsOrgIdRouteRoute: OrganizationsOrgIdRouteRouteWithChildren,
  OrganizationsIndexRoute: OrganizationsIndexRoute,
}

const OrganizationsRouteRouteWithChildren =
  OrganizationsRouteRoute._addFileChildren(OrganizationsRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/organizations': typeof OrganizationsRouteRouteWithChildren
  '/organizations/$orgId': typeof OrganizationsOrgIdRouteRouteWithChildren
  '/organizations/': typeof OrganizationsIndexRoute
  '/organizations/$orgId/employees': typeof OrganizationsOrgIdEmployeesRouteRouteWithChildren
  '/organizations/$orgId/': typeof OrganizationsOrgIdIndexRoute
  '/organizations/$orgId/employees/$employeeId': typeof OrganizationsOrgIdEmployeesEmployeeIdRoute
  '/organizations/$orgId/employees/': typeof OrganizationsOrgIdEmployeesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/organizations': typeof OrganizationsIndexRoute
  '/organizations/$orgId': typeof OrganizationsOrgIdIndexRoute
  '/organizations/$orgId/employees/$employeeId': typeof OrganizationsOrgIdEmployeesEmployeeIdRoute
  '/organizations/$orgId/employees': typeof OrganizationsOrgIdEmployeesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/organizations': typeof OrganizationsRouteRouteWithChildren
  '/organizations/$orgId': typeof OrganizationsOrgIdRouteRouteWithChildren
  '/organizations/': typeof OrganizationsIndexRoute
  '/organizations/$orgId/employees': typeof OrganizationsOrgIdEmployeesRouteRouteWithChildren
  '/organizations/$orgId/': typeof OrganizationsOrgIdIndexRoute
  '/organizations/$orgId/employees/$employeeId': typeof OrganizationsOrgIdEmployeesEmployeeIdRoute
  '/organizations/$orgId/employees/': typeof OrganizationsOrgIdEmployeesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/organizations'
    | '/organizations/$orgId'
    | '/organizations/'
    | '/organizations/$orgId/employees'
    | '/organizations/$orgId/'
    | '/organizations/$orgId/employees/$employeeId'
    | '/organizations/$orgId/employees/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/organizations'
    | '/organizations/$orgId'
    | '/organizations/$orgId/employees/$employeeId'
    | '/organizations/$orgId/employees'
  id:
    | '__root__'
    | '/'
    | '/organizations'
    | '/organizations/$orgId'
    | '/organizations/'
    | '/organizations/$orgId/employees'
    | '/organizations/$orgId/'
    | '/organizations/$orgId/employees/$employeeId'
    | '/organizations/$orgId/employees/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OrganizationsRouteRoute: typeof OrganizationsRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OrganizationsRouteRoute: OrganizationsRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/organizations"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/organizations": {
      "filePath": "organizations/route.tsx",
      "children": [
        "/organizations/$orgId",
        "/organizations/"
      ]
    },
    "/organizations/$orgId": {
      "filePath": "organizations/$orgId/route.tsx",
      "parent": "/organizations",
      "children": [
        "/organizations/$orgId/employees",
        "/organizations/$orgId/"
      ]
    },
    "/organizations/": {
      "filePath": "organizations/index.tsx",
      "parent": "/organizations"
    },
    "/organizations/$orgId/employees": {
      "filePath": "organizations/$orgId/employees/route.tsx",
      "parent": "/organizations/$orgId",
      "children": [
        "/organizations/$orgId/employees/$employeeId",
        "/organizations/$orgId/employees/"
      ]
    },
    "/organizations/$orgId/": {
      "filePath": "organizations/$orgId/index.tsx",
      "parent": "/organizations/$orgId"
    },
    "/organizations/$orgId/employees/$employeeId": {
      "filePath": "organizations/$orgId/employees/$employeeId.tsx",
      "parent": "/organizations/$orgId/employees"
    },
    "/organizations/$orgId/employees/": {
      "filePath": "organizations/$orgId/employees/index.tsx",
      "parent": "/organizations/$orgId/employees"
    }
  }
}
ROUTE_MANIFEST_END */
